#version 330 core 
out vec4 color; 

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoords;   

uniform vec3 lightPos_1; 
uniform vec3 lightColor_1;
uniform vec3 lightPos_2; 
uniform vec3 lightColor_2;
uniform vec3 lightPos_3; 
uniform vec3 lightColor_3;

uniform vec3 objectColor;

uniform sampler2D texture_diffuse1;

uniform float f1;
uniform float f2;
uniform float f3;

void main()
{ 
    vec3 norm = normalize(Normal);
    
    vec3 fil_1 = lightColor_1 * f1;
    vec3 lightDir_1 = normalize(lightPos_1 - FragPos);
    float diff_1 = max(dot(norm, lightDir_1), 0.0);
    vec3 diffuse_1 = diff_1 * fil_1 * vec3(texture(texture_diffuse1, TexCoords));
    vec3 result_1 = (diffuse_1) * objectColor;
    
    vec3 fil_2 = lightColor_2 * f2;
    vec3 lightDir_2 = normalize(lightPos_2 - FragPos);
    float diff_2 = max(dot(norm, lightDir_2), 0.0);
    vec3 diffuse_2 = diff_2 * fil_2 * vec3(texture(texture_diffuse1, TexCoords));
    vec3 result_2 = (diffuse_2) * objectColor;
    
    vec3 fil_3 = lightColor_3 * f3;
    vec3 lightDir_3 = normalize(lightPos_3 - FragPos);
    float diff_3 = max(dot(norm, lightDir_3), 0.0);
    vec3 diffuse_3 = diff_3 * fil_3 * vec3(texture(texture_diffuse1, TexCoords));
    vec3 result_3 = (diffuse_3) * objectColor;

    vec3 result = result_1 + result_2 + result_3;

    color = vec4(result, 1.0f);
} 